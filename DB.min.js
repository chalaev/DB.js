// written by Oleg Shalaev, distributed under GNU GPL v3.0
'use strict';
var DB=(function(){
function _N(_R,_bb){
switch(_bb){
case 'int': return parseInt(_R);break;
case 'bool':return typeof _R=='boolean'? _R: _R=='';break;
case 'str': return _R;break;
default: return NaN}}
function _X(_be){
const _Y={text:'textContent',obj:null,array:null,oarray:null};
return _Y.hasOwnProperty(_be)?_Y[_be]:_be}
function _Z(_bd,_F){
if(_F !== undefined && _bd.type=='bool') _F=Boolean(_F);
const _g=['str','int','bool'];
if(_bd.type=='oarray'||
!(_bd._l? _bd._l(_bd.value,_F): _bd.value==_F)){
var _K=_bd.value;
if(_F!==undefined){
if(_bd.type=='oarray' && _bd.onChange) _bd.onChange(_bd.value);
if(_bd.onChange) _bd.onChange(_bd.value=_bd.copy(_F));
else _bd.value=_bd.copy(_F)} 
if(_bd.write) _F=_bd.value=_bd.write(_K,_F);
_bd._o.forEach(_be=>{
if(_be.compute) _C(_be);else 
if(_be.sort){var _bg=_be.value;_bg.sort(_be.sort());_Z(_be,_bg)}});
if(_g.indexOf(_bd.type)>=0){
_bd._f.forEach(function(_U){
switch(_U.type){
case 'class':_U._d.classList.toggle(_bd._bc,_F);break;
case 'display':_U._d.style.display=_F;break;
case 'visible':_U._d.style.visibility=_F?'visible':'hidden';break;
default: _U._d[_X(_U.type)]=_F}})}
if(_bd.type=='oarray'){
_bd.length=_bd.value.length;
_bd._f.forEach(function(DR){
while(DR._d.firstChild) DR._d.removeChild(DR._d.firstChild);
for(var _w in _bd.value)
DR._A.forEach(_T=>DR._d.appendChild(treat(_T.cloneNode(true),_bd.value[_w],_w)))})}}
return _F}
function _C(_J,_t=-1){
if(_J.dT==0)_Z(_J,_J.compute(_t));
else{if(!_J._ba){
var _W=(new Date()).getTime();
if(_W<_J._B+_J.dT){
_J._ba=true;
setTimeout(()=>{_J._ba=false;_C(_J),_J.dT})}
else{
_J._B=_W;
_Z(_J,_J.compute(_t));
_J._B=(new Date()).getTime()}}}}
function treat(_d,_M,_t){
if(_d.getAttribute){
var _a=_d.getAttribute("db");
if(_a){_a.split(',').forEach(function(_db){
var _b=_db.split(':'),_c=_b[0],
_e={'type':_c=='attr'? _b[1]:_b[0],
'_d':_d,'visible':"visible"==window.getComputedStyle(_d).visibility};
switch(_c){
case 'onClick':_b[2]=_b[1];_c='ev';_b[1]='click';break;
case 'onKey': _b[2]=_b[1];_c='ev';_b[1]='keypress'}
var _bc=0<=['attr','ev'].indexOf(_c)? _b[2] : _b[1],
_S=_M && _bc in _M? _M[_bc]:
(function(){try{return eval(_bc)} catch(e){return undefined}})();
if(_S!==undefined){
var value=_S.DB?
((_S.DB.compute && !_S.DB._y)? _Z(_S.DB,_S.DB.compute(_t)):_S.DB.value):
_S;
if(_S.DB){
switch(_c){
case 'attr': 
_d.setAttribute(_b[1],value);break;
case 'ev': _d.addEventListener(_b[1],ev=>_S.DB.compute(ev,_t));break;
case 'value':
_d.value=_S.DB.value;
_d.addEventListener('change',ev=>_Z(_S.DB,_N(_d.value,_S.DB.type)));
break;
case 'checked':
_d.checked=_S.DB.value;
_d.addEventListener('click',ev=>_Z(_S.DB,_N(_d.checked,_S.DB.type)));
break;
case 'text': _d[_X(_c)]=_S.DB.value;break;
case 'display': _d.style.display=_S.DB.value;break;
case 'visible': _d.style.visibility=_S.DB.value?'visible':'hidden';break;
case 'class': 
_S.DB._bc=_bc;
_d.classList.toggle(_bc,_S.DB.value);break;
case 'forEach':
_e._A=Array.from(_d.children).map(c=>c.cloneNode(true));
while(_d.firstChild) _d.removeChild(_d.firstChild);
for(var _w in value)
_e._A.forEach(_be=>_d.appendChild(treat(_be.cloneNode(true),value[_w],_w)))}
_S.DB._f.push(_e);
if(_S.DB.value) _Z(_S.DB,_S.DB.value)}
else switch(_c){
case 'attr':
var _O=_b[1];
_d[_O]=_S;
break;
case 'ev': _d.addEventListener(_b[1],ev=>_S(ev,_t));break;
case 'value': _d.value=_S;break;
case 'text': _d[_X(_c)]=_S;break;
case 'display':_d.style.display=_S;break;
case 'visible': _d.style.visibility=_S?'visible':'hidden';break;
case 'forEach':
var _A=Array.from(_d.children).map(_be=>_be.cloneNode(true));
while(_d.firstChild) _d.removeChild(_d.firstChild);
for(var _w in value)
_A.forEach(_be=>_d.appendChild(treat(_be.cloneNode(true),value[_w],_w)))}}
_d.removeAttribute('db')})}}
Array.from(_d.children).forEach(c=>treat(c,_M,_t));
return _d}
return{
'scanHTML':function(_ds=[document]){Array.from(_ds).forEach(_be=>treat(_be,null,null))},
'everyElement':(_j,_v)=> function(){return{
_I:_j,
_u:_v,
_G:_j().map(_be=>_be[_v])}},
'observable':function(_q=[], 
_L={}){
function _H(_be){
if(null==_be||"object"!= typeof _be) return _be;
var _E=Array.isArray(_be)? []:{};
for(var _w in _be) _E[_w]=_H(_be[_w]);
return _E}
const _n={_o:[],_s:[],_f:[],dT:0};
var _J=this;
if(_L.hasOwnProperty('value') && !_L.hasOwnProperty('type')){
switch(typeof _L.value){
case "number":_L.type='int';break;
case "string":_L.type='str';break;
case "object":_L.type=Array.isArray(_J.value)?'array':'obj'}}
_J=Object.assign(_J,_H(_n),_L);
_q.forEach(function(_be){
if(_be.hasOwnProperty('DB')) 
_be.DB._o.push(_J);
else{
var _bf=_be();
_bf._I().map(_be=>_be[_bf._u]).forEach(_bg=>_bg.DB._o.push(_J));
_bf._I.DB._i.push([_bf._u,_J])}});
_J.copy=_L.hasOwnProperty('copy')? _L.copy:_H;
if(_J.hasOwnProperty('sort')) _J.value.sort(_J.sort());
if(_J.hasOwnProperty('compute')){
_J.update=()=>_C(_J);
_J._y=_L.hasOwnProperty('value');
if(!_J._y) _J.update()}
var _h=function(_F){
if(_F!==undefined){
if(_J.type=='oarray'){
_J.value=_F;
if(_J.hasOwnProperty('sort')) _J.value.sort(_J.sort());
_Z(_J)}
else _Z(_J,_F);
_J._f.forEach(_be=>{
if(_be.type=='forEach'){
while(_be._d.firstChild) _be._d.removeChild(_be._d.firstChild);
for(var _w in _J.value)
Array.from(_be._A).forEach(_bg=>_be._d.appendChild(
treat(_bg.cloneNode(true),_J.value[_w],_w)))}
else _be._d[_X(_be.type)]=_J.value})
return _F}
else{return _J.value}};
if(_J.type=='oarray'){
_h.l=()=>_J.value.length;
_J._i=[];
_h.push=function(_D){
_J.value.push(_D);
if(_J.hasOwnProperty('sort')) _J.value.sort(_J.sort());
_J._i.forEach(_be=>{
_D[_be[0]].DB._o.push(_be[1]);
if(_be[1].compute) _Z(_be[1],_be[1].compute())});
_Z(_J)};
_h.pop=function(){
var _P=_J.value.pop();
_Z(_J);
return _P};
_h.drop=function(_w){
var _z="string"==typeof _w? parseInt(_w):_w,_r=_J.value[_z];
_J.value.splice(_w,1);_Z(_J);return _r}
_h.sort=function(_Q){
_J.sort=_Q;
_J.value.sort(_Q());
_Z(_J)}}
_h.DB=_J;
return _h}}})();
